< 2019.3.25 >

오라클 계정
senseheejin@naver.com
HJtkfkd486

XE  password java006$

오라클 기본 포트 번호 1521


< 2019.3.26 >

services.msc
OracleXE 나 listener 설정 자동 → 수동

 ★★★ SELECT 문의 처리(PARSING) 순서 ★★★
  
  SELECT 컬럼명     -- ⑤
  FROM 테이블명     -- ①
  WHERE 조건절      -- ②
  GROUP BY 절       -- ③
  HAVING 조건절     -- ④
  ORDER BY 절       -- ⑥

--■■■ 오라클의 주요 자료형(DATA TYPE) ■■■--
/*
cf) MSSQL 서버의 정수 표현 타입
    tinyint     0 ~ 255             1Byte
    smallint    -32.768 ~ 32767     2Byte
    int         -21억 ~ 21억        4Byte
    bigint      엄청큼              8Byte
    
    MSSQL 서버의 실수 표현 타입
    float, real
    
    MSSQL 서버의 숫자 표현 타입
    decimal, numeric
    
    MSSQL 서버의 문자 표현 타입
    char, varchar, Nvarchar
*/

--※ ORACLE 서버는 숫자 표현 타입이 한 가지로 통일되어 있다.
/*
1. 숫자형 NUMBER        → -10의 38승-1 ~ 10의 38승
          NUMBER(3)     → -999 ~ 999
          NUMBER(4)     → -9999 ~ 9999
          NUMBER(4,1)   → -999.9 ~ 999.9
*/

--※ ORACLE 서버의 문자 표현 타입
--   CHAR, VARCHAR2, NVARCHAR2
/*
2. 문자형  CHAR
           CHAR(10)  → 무조건 10BYTE 소모
           CHAR(10)  ← '강의실'        6Byte 이지만 10Byte 를 소모
           CHAR(10)  ← '잠깬조현우'    10Byte
           CHAR(10)  ← 'Oh잠깬조현우'  10Byte 를 초과하므로 입력 불가
           
           VARCHAR2     → 가변형 크기
           VARCHAR2(10) ← '강의실'         6Byte 소모
           VARCHAR2(10) ← '잠깬조현우'     10Byte
           VARCHAR2(10) ← 'Oh잠깬조현우'   10Byte 를 초과하므로 입력 불가 
           
           NCHAR        - 유니코드 기반 고정형 크리(글자수)
           NCAHT(10)    - 10글자
           NVARCHAR2    - 유니코드 기반 가변형 크기(글자수)
           NVARCHAR2    - 10글자


< 2019.3.27 >

※ 휴지통 비우기
PURGE RECYCLEBIN;

○ TBL_EMP 테이블에 주민등록번호 정보를 담을 수 있는 컬럼 추가
ALTER TABLE TBL_EMP
ADD SSN CHAR(13);
--==>> Table TBL_EMP이(가) 변경되었습니다.
-- 맨 앞에 0이 들어올 가능성이 있는 숫자가 조합된 데이터라면
-- 숫자형이 아닌 문자형으로 데이터타입을 처리해야 한다.

○ TBL_EMP 테이블에서 추가한 SSN(주민등록번호) 컬럼 제거
ALTER TABLE TBL_EMP
DROP COLUMN SSN;

※ NULL 은 실제 존재하지 않는 값이기 때문에 일반적인 연산자를 활용하여 비교할 수 없다.
   즉, 산술적인 비교 연산을 수행할 수 없다는 의미이다.
   NULL 을 대상으로 사용할 수 없는 연산자들
   → >=, <=, >, <, !=, ^=, <>


WHERE COMM is NULL;



sys
yhj
hr
sys scott


< 2019.3.28 >

SELECT *
FROM TBL_WATCH
WHERE BIGO LIKE '%99.99\%%' ESCAPE '\';

* COMMIT 하지 않고 TABLE 생성시 AUTO COMMIT

ROLLBACK, COMMIT

ORDER BY, ASC DESC

ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD';
--==>> Session이(가) 변경되었습니다.


* CONCAT()
--> 내부적인 형 변환이 일어나며 결합을 수행하게 된다.
--  CONCAT()은 문자열과 문자열을 결합시켜주는 함수이지만
--  내부적으로는 숫자나 날짜를 문자타입으로 바꾸어주는 과정이 포함되어 있다.


○ SUBSTR() 갯수 기반 / SUBSTRB() 바이트 기반    → 문자열 추출 함수

○ LENGTH()/ LENGTHB()
--> LENGTH()는 글자 수를 반환, LENGTHB() 는 바이트 수를 반환


○ LPAD()
--> Byte 공간을 확보하여 왼쪽부터 문자로 채우는 기능을 가진 함수

--> ① 10Byte 공간을 확보한다.                  → 두 번째 파라미터 값에 의해
--  ② 확보한 공간에 'ORACLE' 문자열을 담는다.  → 첫 번째 파라미터 값에 의해
--  ③ 남아있는 Byte 공간을 왼쪽부터 세 번쨰 파라미터 값으로 채운다.
--  ④ 이렇게 구성된 최종 결과값을 반환한다.


○ RPAD()
--> ① 10Byte 공간을 확보한다.                  → 두 번째 파라미터 값에 의해
--  ② 확보한 공간에 'ORACLE' 문자열을 담는다.  → 첫 번째 파라미터 값에 의해
--  ③ 남아있는 Byte 공간을 오른쪽부터 세 번쨰 파라미터 값으로 채운다.
--  ④ 이렇게 구성된 최종 결과값을 반환한다.



< 2019.3.29 >

○ ROUND() 반올림을 처리해주는 함수

○ TRUNC() 절삭을 처리해주는 함수

○ MOD() 나머지를 반환하는 함수

○ POWER() 제곱의 결과를 반환하는 함수

○ SQRT() 루트 결과값을 반환하는 함수

○ LOG() 로그 함수
--   (※ 오라클은 상용로그만 지원하는 반면, MYSQL 은 상용로그, 자연로그 모두 지원한다.

○ 삼각 함수
--   싸인, 코싸인, 탄젠트 결과값을 반환한다.

○ 삼각함수의 역함수 (범위 : -1 ~ 1)
--   어싸인, 어코싸인, 어탄젠트 결과값을 반환한다.

○ SIGN()      서명, 부호, 특징
-->  연산 결과가 양수이면 1, 0이면 0, 음수이면 -1을 반환한다.

○ ASCII(), CHR() → 서로 상응하는 개념의 함수
SELECT ASCII('A'), CHR(65)
FROM DUAL;
--==>> 65	A
--> ASCII() : 매개변수로 넘겨받은 문자의 아스키코드 값을 반환한다.
--  CHR()   : 매개변수로 넘겨받은 숫자를 아스키코드 값으로 취하는 문자를 반환한다.


※ 날짜 연산의 기본 단위는 DAY(일수)이다!!


○ 현재 시간과 현재 시간 기준 1일 2시간 3분 4초 후를 조회한다.
SELECT SYSDATE"현재 시간", SYSDATE +1 +2/24 + 3/24/60 + 4/24/60/60"연산 후 시간"
FROM DUAL;
/*
현재 시간               연산 후 시간            
------------------- -------------------
2019-03-29 09:37:46 2019-03-30 11:40:50
*/


○ ADD_MONTHS() 개월 수를 더해주는 함수


○ MONTHS_BETWEEN()
-- 첫 번째 인자값에서 두 번째 인자값을 뺀 개월 수를 반환
SELECT MONTHS_BETWEEN(SYSDATE, TO_DATE('2002-05-31', 'YYYY-MM-DD'))
FROM DUAL;
--==>> 201.949145385304659498207885304659498208


○ NEXT_DAY()
-- 첫 번째 인자값을 기준 날짜로 돌아오는 가장 빠른 요일 반환
SELECT NEXT_DAY(SYSDATE,'토'), NEXT_DAY(SYSDATE, '월')
FROM DUAL;
--==>> 2019-03-30	2019-04-01


-- 『93784』초를 다시 일, 시간, 분, 초로 환산하면
SELECT MOD(93784, 60)
FROM DUAL;
--==>> 4

SELECT TRUNC(TRUNC(TRUNC(93784/60)/60)/24)
     , MOD(TRUNC(TRUNC(93784/60)/60), 24)
     , MOD(TRUNC(93784/60), 60)
     , MOD(93784, 60)
FROM DUAL;
--==>> 1	2	3	4


SELECT TO_CHAR(SYSDATE, 'YYYY-MM-DD')   -- 2019-03-29
     , TO_CHAR(SYSDATE, 'YYYY')         -- 2019             → 문자타입
     , TO_CHAR(SYSDATE, 'YEAR')         -- TWENTY NINETEEN
     , TO_CHAR(SYSDATE, 'MM')           -- 03
     , TO_CHAR(SYSDATE, 'MONTH')        -- 3월 
     , TO_CHAR(SYSDATE, 'MON')          -- 3월 
     , TO_CHAR(SYSDATE, 'DD')           -- 29
     , TO_CHAR(SYSDATE, 'DAY')          -- 금요일
     , TO_CHAR(SYSDATE, 'DY')           -- 금
     , TO_CHAR(SYSDATE, 'HH24')         -- 14
     , TO_CHAR(SYSDATE, 'HH')           -- 02
     , TO_CHAR(SYSDATE, 'HH AM')        -- 02 오후
     , TO_CHAR(SYSDATE, 'HH PM')        -- 02 오후
     , TO_CHAR(SYSDATE, 'MI')           -- 20
     , TO_CHAR(SYSDATE, 'SS')           -- 27
     , TO_CHAR(SYSDATE, 'SSSSS')        -- 51627            → 자정12시부터 지금까지의 흘러온 전체 초
     , TO_CHAR(SYSDATE, 'Q')            -- 1                → 분기
FROM DUAL;


○ EXTRACT()
SELECT TO_CHAR(SYSDATE, 'YYYY')     -- 2019 (좌측)    → 연도를 추출하여 문자타입으로
     , TO_CHAR(SYSDATE, 'MM')       -- 03   (좌측)    → 월을 추출하여 문자타입으로
     , TO_CHAR(SYSDATE, 'DD')       -- 29   (좌측)    → 일을 추출하여 문자타입으로
     , EXTRACT(YEAR FROM SYSDATE)   -- 2019 (우측)    → 연도를 추출하여 숫자타입으로
     , EXTRACT(MONTH FROM SYSDATE)  -- 3    (우측)    → 월을 추출하여 숫자타입으로
     , EXTRACT(DAY FROM SYSDATE)    -- 29   (우측)    → 일을 추출하여 숫자타입으로
FROM DUAL;
--> 년, 월, 일 이하 다른 것은 불가


○ TO_CHAR() 활용 → 형식 맞춤 표기 결과값 반환
SELECT 60000                            -- 60000
     , TO_CHAR(60000)                   -- 60000    (숫자 → 문자)
     , TO_CHAR(60000, '99,999')         -- 60,000
     , TO_CHAR(60000, '$99,999')        -- $60,000
     , TO_CHAR(60000, 'L99,999')        --           \60,000  (원)
     , LTRIM(TO_CHAR(60000, 'L99,999')) -- \60,000  (공백제거)
FROM DUAL;


○ 현재 시간을 기준으로 1년 2개월 3일 4시간 5분 6초 후를 조회한다.
-- TO_YMINTERVAL(), TO_DSINTERVAL()
SELECT SYSDATE"현재시각"
    , SYSDATE + TO_YMINTERVAL('01-02') + TO_DSINTERVAL('003 04:05:06')"연산결과"
FROM DUAL;
--==>>
/*
2019-03-29 14:51:00	
2020-06-01 18:56:06
*/


○ CASE 구문 (조건문, 분기문)
/*
CASE
WHEN
THEN
ELSE
END
*/



○ 문제
-- TBL_SAWON 테이블을 활용하여 다음과 같은 항목들을 조회한다.
-- 사원번호, 사원명, 주민번호, 성별, 현재나이, 입사일
-- , 정년퇴직일, 근무일수, 남은일수, 급여, 보너스

-- 단, 현재 나이는 한국나이 계산법에 따라 연산을 수행한다.
-- 또한, 정년퇴직일은 해당 직원의 나이가 한국나이로 60세가 되는 해(년도)의 
-- 그 직원의 입사, 월, 일로 연산을 수행한다.
-- 그리고 보너스는 1000일 이상 2000일 미만 근무한 사원은
-- 그 사원의 원래 급여 기준 30% 지급,
-- 2000일 이상 근무한 사원은 그 사원의 원래 급여 기준 50% 지급을 할 수 있도록 처리한다.

ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD';
--==>> Session이(가) 변경되었습니다.

SELECT SANO"사원번호", SANAME"사원명", JUBUN"주민번호"
     , CASE SUBSTR(JUBUN, 7, 1) WHEN '1' THEN '남자' WHEN '2' THEN '여자' WHEN '3' THEN '남자' WHEN '4' THEN '여자' END "성별"
     , CASE WHEN SUBSTR(JUBUN, 1, 2)>0 AND SUBSTR(JUBUN, 1, 2)<10 THEN TO_CHAR(SYSDATE, 'YY')-SUBSTR(JUBUN, 1, 2) +1
        ELSE TO_CHAR(SYSDATE, 'YY') - SUBSTR(JUBUN, 1, 2) +100 +1
        END "현재 나이"
     , HIREDATE"입사일"
     , CASE WHEN SUBSTR(JUBUN, 1, 2)>0 AND SUBSTR(JUBUN, 1, 2)<10 THEN ADD_MONTHS(HIREDATE, (60 - (TO_CHAR(SYSDATE, 'YY')-SUBSTR(JUBUN, 1, 2) +1))*12 + (2019-EXTRACT(YEAR FROM HIREDATE))*12)
        ELSE ADD_MONTHS(HIREDATE, (60-(TO_CHAR(SYSDATE, 'YY') - SUBSTR(JUBUN, 1, 2) +100 +1))*12 + (2019-EXTRACT(YEAR FROM HIREDATE))*12)
        END "정년퇴직일"
     , TRUNC(SYSDATE - HIREDATE)"근무일수"
     , CASE WHEN SUBSTR(JUBUN, 1, 2)>0 AND SUBSTR(JUBUN, 1, 2)<10 THEN TRUNC(ADD_MONTHS(HIREDATE, (60 - (TO_CHAR(SYSDATE, 'YY')-SUBSTR(JUBUN, 1, 2) +1))*12 + (2019-EXTRACT(YEAR FROM HIREDATE))*12) - SYSDATE)
        ELSE TRUNC(ADD_MONTHS(HIREDATE, (60-(TO_CHAR(SYSDATE, 'YY') - SUBSTR(JUBUN, 1, 2) +100 +1))*12 + (2019-EXTRACT(YEAR FROM HIREDATE))*12)-SYSDATE)
        END "남은일수"
     , SAL "급여"
     , CASE WHEN TRUNC(SYSDATE-HIREDATE)<1000 THEN 0
             WHEN TRUNC(SYSDATE-HIREDATE)>=1000 AND TRUNC(SYSDATE-HIREDATE)<2000 THEN SAL*0.3
            ELSE SAL*0.5
        END "보너스"
FROM TBL_SAWON;


< 2019.4.1 >

** VIEW

○ RANK() → 등수(순위)를 반환하는 함수
SELECT EMPNO"사원번호", ENAME"사원명", DEPTNO"부서번호", SAL"급여"
     , RANK() OVER(PARTITION BY DEPTNO ORDER BY SAL DESC)"부서내 급여순위"
     , RANK() OVER(ORDER BY SAL DESC)"전체급여순위"

○ DENSE_RANK() → 서열을 반환하는 함수
FROM EMP
ORDER BY 3, 4 DESC;

■■■ 그룹 함수 ■■■--

-- SUM() 합, AVG() 평균, COUNT() 카운트, MAX() 최대값, MIN() 최소값
-- VARIANCE() 분산, STDDEV() 표준편차

--※ 그룹 함수의 가장 큰 특징은
--   처리해야 할 데이터들 중 NULL 이 존재하면
--   이 NULL 은 제외하고 연산을 수행한다는 것이다.

 SUM()
-- EMP 테이블을 대상으로 전체 사원들의 급여 총합을 조회한다.

 COUNT()
-- 행의 갯수 조회하여 결과값 반환 

 AVG()
-- 평균 반환

※ 표준편차의 제곱이 분산
--   분산의 제곱근이 표준편차

 MAX() / MIN()
-- 최대값 / 최소값 반환


※ ROLLUP() 과 CUBE() 는
--   그룹을 묶어주는 방식이 다르다. (차이)

-- ROLLUP(A, B, C)
-- → (A, B, C) / (A, B) / (A) / ()

-- CUBE(A, B, C)
-- → (A, B, C) / (A, B)/ (A, C) / (B / C) / (A) / (B) / (C) / ()

--==>> 위의 처리 내용은 너무 많은 결과물이 출력되기 때문에
--     다음의 쿼리 형태를 더 많이 사용한다.
--     다음 작성하는 쿼리는 조회하고자 하는 그룹만 『GROUPING SETS』를
--     이용하여 묶어주는 방법이다.































